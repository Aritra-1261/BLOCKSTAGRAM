import datetime
import json
import hashlib
import base64



class Blockchain:
    def __init__(self):
        self.chain = []
        genimg=""
        self.create_blockchain(proof=1, previous_hash='0',img=genimg)

    def create_blockchain(self, proof, previous_hash,img):
        block = {
            'index': len(self.chain) + 1,
            'timestamp': str(datetime.datetime.now()),
            'image': img ,
            'proof': proof,
            'previous_hash': previous_hash
        }

        self.chain.append(block)
        return block

    def get_previous_block(self):
        last_block = self.chain[-1]
        return last_block

    def proof_of_work(self, previous_proof):
        # miners proof submitted
        new_proof = 1
        # status of proof of work
        check_proof = False
        while check_proof is False:
            # problem and algorithm based off the previous proof and new proof
            hash_operation = hashlib.sha256(str(new_proof ** 2 - previous_proof ** 2).encode()).hexdigest()
            # check miners solution to problem, by using miners proof in cryptographic encryption
            # if miners proof results in 4 leading zero's in the hash operation, then:
            if hash_operation[:4] == '0000':
                check_proof = True
            else:
                # if miners solution is wrong, give mine another chance until correct
                new_proof += 1
        return new_proof

    # generate a hash of an entire block
    def hash(self, block):
        nblock=dict.copy(block)
        nblock.pop('image')
        encoded_block = json.dumps(nblock, sort_keys=True).encode()
        return hashlib.sha256(encoded_block).hexdigest()

    # check if the blockchain is valid
    def is_chain_valid(self, chain):
        # get the first block in the chain and it serves as the previous block
        previous_block = chain[0]
        # an index of the blocks in the chain for iteration
        block_index = 1
        while block_index < len(chain):
            # get the current block
            block = chain[block_index]
            # check if the current block link to previous block has is the same as the hash of the previous block
            if block["previous_hash"] != self.hash(previous_block):
                return False

            # get the previous proof from the previous block
            previous_proof = previous_block['proof']

            # get the current proof from the current block
            current_proof = block['proof']

            # run the proof data through the algorithm
            hash_operation = hashlib.sha256(str(current_proof ** 2 - previous_proof ** 2).encode()).hexdigest()
            # check if hash operation is invalid
            if hash_operation[:4] != '0000':
                return False
            # set the previous block to the current block after running validation on current block
            previous_block = block
            block_index += 1
        return True
    def replacechain(self,blocks):
        if len(blocks) <= len(self.chain):
            return
        elif not self.is_chain_valid(blocks):
            return
        self.chain=blocks
        return

class imageHandeling:
    def __init__(self):
        #initializing image path
        self.img="\img.jpg"

    def encode_string(self):
        with open(self.img, "rb") as image:
            image_string = base64.b64encode(image.read())
        return image_string.decode("ascii")

class readData:
    def __init__(self):
        self.gg=None
    def retrive(self):
        self.gg=[]
        with open("templates/response.json",'r') as fp:
            data=json.loads(fp.read())
            for dt in data["chain"]:
                self.gg.append(dt)
        return self.gg

 